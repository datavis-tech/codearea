{"version":3,"sources":["initialText.js","useOps.js","generateOp.js","CodeAreaTextArea.js","CodeAreaHighlighter.js","CodeArea.js","App.js","index.js"],"names":["initialText","useOps","text$","op$","useEffect","pipe","pairwise","subscribe","_ref","_ref2","Object","slicedToArray","oldText","newText","next","jsondiff","diffMatchPatch","generateOp","unsubscribe","CodeAreaTextArea","_useState","useState","_useState2","text","setText","onTextChange","useCallback","event","target","value","react_default","a","createElement","onChange","className","setupParser","asyncToGenerator","regenerator_default","mark","_callee","JavaScript","parser","wrap","_context","prev","Parser","init","Language","load","sent","setLanguage","abrupt","stop","apply","this","arguments","highlightClasses","identifier","string","walkTree","tree","previousIndex","walk","node","children","childCount","map","substring","endIndex","type","key","id","rootNode","positionFromIndex","index","row","column","i","CodeAreaHighlighter","setParser","_useState3","_useState4","highlighted","setHighlighted","then","getValue","parse","op","p","si","sd","forEach","c","edit","startIndex","oldEndIndex","length","newEndIndex","startPosition","oldEndPosition","newEndPosition","CodeArea","CodeAreaTextArea_CodeAreaTextArea","CodeAreaHighlighter_CodeAreaHighlighter","App","useMemo","BehaviorSubject","Subject","CodeArea_CodeArea","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7cf5a54a.chunk.js","sourcesContent":["export const initialText = `import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nfunction App() {\n  return (\n    <h1>Hello world</h1>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));`;\n","import { useEffect } from 'react';\nimport { pairwise } from 'rxjs/operators';\nimport { generateOp } from './generateOp';\n\nexport const useOps = (text$, op$) => {\n  useEffect(\n    () =>\n      text$.pipe(pairwise()).subscribe(([oldText, newText]) => {\n        op$.next(generateOp(oldText, newText));\n      }).unsubscribe,\n    [text$, op$]\n  );\n};\n","import jsondiff from 'json0-ot-diff';\nimport diffMatchPatch from 'diff-match-patch';\n\nexport const generateOp = (oldText, newText) =>\n  jsondiff(oldText, newText, diffMatchPatch);\n","import React, { useCallback, useEffect, useState } from 'react';\n\nexport const CodeAreaTextArea = ({ text$ }) => {\n  const [text, setText] = useState();\n\n  useEffect(() => text$.subscribe(setText).unsubscribe, [text$, setText]);\n\n  const onTextChange = useCallback(\n    event => {\n      text$.next(event.target.value);\n    },\n    [text$]\n  );\n\n  return (\n    <textarea\n      value={text}\n      onChange={onTextChange}\n      className=\"codearea-textarea\"\n    />\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport Parser from 'web-tree-sitter';\n\nconst setupParser = async () => {\n  await Parser.init();\n  const JavaScript = await Parser.Language.load('tree-sitter-javascript.wasm');\n  const parser = new Parser();\n  parser.setLanguage(JavaScript);\n  return parser;\n};\n\nconst highlightClasses = {\n  identifier: 'identifier',\n  string: 'string'\n};\n\nconst walkTree = (text, tree) => {\n  let previousIndex = 0;\n\n  const walk = node => {\n    let children;\n    if (node.childCount > 0) {\n      children = node.children.map(walk);\n    } else {\n      // This approach is required because node.text doesn't include whitespace.\n      children = text.substring(previousIndex, node.endIndex);\n      previousIndex = node.endIndex;\n    }\n\n    const className = highlightClasses[node.type];\n    return className ? (\n      <span className={className} key={node.id}>\n        {children}\n      </span>\n    ) : (\n      children\n    );\n  };\n\n  return walk(tree.rootNode);\n};\n\nconst positionFromIndex = (index, text) => {\n  let row = 0;\n  let column = 0;\n  for (let i = 0; i < index; i++) {\n    row++;\n    if (text[i] === '\\n') {\n      column++;\n      row = 0;\n    }\n  }\n  return { row, column };\n};\n\nexport const CodeAreaHighlighter = ({ text$, op$ }) => {\n  const [parser, setParser] = useState();\n  const [highlighted, setHighlighted] = useState(null);\n\n  useEffect(() => {\n    setupParser().then(setParser);\n  }, []);\n\n  useEffect(() => {\n    if (!parser) {\n      return;\n    }\n\n    // Initialize the tree.\n    const text = text$.getValue();\n    let tree = parser.parse(text);\n    setHighlighted(walkTree(text, tree));\n\n    return op$.subscribe(op => {\n      // Handle string insert, string delete,\n      // and string replace (one si and one sd, at same index).\n      let p, si, sd;\n      op.forEach(c => {\n        p = c.p;\n        si = c.si;\n        sd = c.sd;\n      });\n\n      const text = text$.getValue();\n\n      const edit = {\n        startIndex: p[0],\n        oldEndIndex: p[0] + (sd ? sd.length : 0),\n        newEndIndex: p[0] + (si ? si.length : 0)\n      };\n\n      edit.startPosition = positionFromIndex(edit.startIndex, text);\n      edit.oldEndPosition = positionFromIndex(edit.oldEndIndex, text);\n      edit.newEndPosition = positionFromIndex(edit.newEndIndex, text);\n\n      // Incremental parsing happens here.\n      tree.edit(edit);\n      tree = parser.parse(text, tree);\n\n      // Re-generate JSX for highlighting.\n      setHighlighted(walkTree(text, tree));\n    }).unsubscribe;\n  }, [parser, text$, op$]);\n\n  return <pre>{highlighted}</pre>;\n};\n","import React from 'react';\nimport { CodeAreaTextArea } from './CodeAreaTextArea';\nimport { CodeAreaHighlighter } from './CodeAreaHighlighter';\nimport './CodeArea.css';\n\nexport const CodeArea = ({ text$, op$ }) => {\n  return (\n    <div className=\"code-area\">\n      <CodeAreaTextArea text$={text$} />\n      <CodeAreaHighlighter text$={text$} op$={op$} />\n    </div>\n  );\n};\n","import React, { useMemo } from 'react';\nimport './App.css';\nimport { initialText } from './initialText';\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { useOps } from './useOps';\nimport { CodeArea } from './CodeArea';\n\nfunction App() {\n  const text$ = useMemo(() => new BehaviorSubject(initialText), []);\n  const op$ = useMemo(() => new Subject(), []);\n\n  useOps(text$, op$);\n\n  //useEffect(\n  //  () =>\n  //    op$.subscribe({\n  //      next: op => {\n  //        console.log(op);\n  //      }\n  //    }).unsubscribe,\n  //  [op$]\n  //);\n\n  return (\n    <div className=\"App\">\n      <CodeArea text$={text$} op$={op$} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}